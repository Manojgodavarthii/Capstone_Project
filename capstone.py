# -*- coding: utf-8 -*-
"""capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fn6WvaPQNPvHuUWEieY2irNQVTJiBREy
"""

import pandas as pd

import numpy as np

"""# Import Dataset"""

df=pd.read_csv("/content/Book_1.csv", encoding='latin-1')

"""#  Describe Data

"""

df.head()

df.info()

df.shape

df.columns

"""# Data Visualization"""

import matplotlib.pyplot as plt
import seaborn as sns


ratings = df.groupby('Course Code').size()
plt.figure(figsize=(10, 6))
sns.histplot(ratings, bins=50, kde=False)
plt.title('Number of  subject per  groupby Course Code')
plt.xlabel('Number of subjects')
plt.ylabel('Count')
plt.show()

df.head(1)

#df['Movie_Genre'] = df['Movie_Genre']

genre_popularity = df.groupby('Marks (200)')['Marks (200)'].mean().sort_values(ascending=False)

plt.figure(figsize=(12, 8))

sns.barplot(x=genre_popularity.index, y=genre_popularity.values, palette='viridis')
plt.title('Average Movie Rating by Genre')
plt.xlabel('Genre')
plt.ylabel('Average Rating')
plt.xticks([])
plt.show()

# Check the existing columns in your DataFrame
print(df.columns)

# Assuming there's a typo and the actual column name is 'Grade Points', correct it
df_features = df[['Course Code', 'Marks (200)', 'Grade']].fillna('')

# If the column truly doesn't exist, consider creating it or adjusting your logic.
# For instance, if 'Grade Points' needs to be calculated based on other columns, do so before this line.
# Example:
df['Grade Points'] = df['Grade'].map({'A': 4, 'B': 3, 'C': 2, 'D': 1, 'F': 0}) # Replace with your actual grading scale
print(df)

df_features=df[['Course Code', 'Marks (200)', 'Grade', 'Grade Points']].fillna('')

"""Selected five existing filters to recommend movies, which can vary by project, such as vote counts, budget, language, and more."""

df_features.shape

df_features

"""# Get Feature Selection
## Defining Target Variable (y) and Feature Variables (X)
"""

# Check the existing columns in your DataFrame
print(df.columns)

# Assuming there's a typo and the actual column name is 'Grade Points', correct it
df_features = df[['Course Code', 'Marks (200)', 'Grade']].fillna('')

# If the column truly doesn't exist, consider creating it or adjusting your logic.
# For instance, if 'Grade Points' needs to be calculated based on other columns, do so before this line.
# Example:
df['Grade Points'] = df['Grade'].map({'A': 4, 'B': 3, 'C': 2, 'D': 1, 'F': 0}) # Replace with your actual grading scale
print(df)

df_features=df[['Course Code', 'Marks (200)', 'Grade', 'Grade Points']].fillna('')

"""Selected five existing filters to recommend movies, which can vary by project, such as vote counts, budget, language, and more."""

df_features.shape

df_features

import matplotlib.pyplot as plt
import seaborn as sns


ratings = df.groupby('Course Code').size()
plt.figure(figsize=(10, 6))
sns.histplot(ratings, bins=50, kde=False)
plt.title('Number of  subject per  groupby Course Code')
plt.xlabel('Number of subjects')
plt.ylabel('Count')
plt.show()

df.head(1)

#df['Movie_Genre'] = df['Movie_Genre']

genre_popularity = df.groupby('Marks (200)')['Marks (200)'].mean().sort_values(ascending=False)

plt.figure(figsize=(12, 8))

sns.barplot(x=genre_popularity.index, y=genre_popularity.values, palette='viridis')
plt.title('Average Movie Rating by Genre')
plt.xlabel('Genre')
plt.ylabel('Average Rating')
plt.xticks([])
plt.show()

"""# Data Modeling"""

X = df_features['Marks (200)'].astype(str) + " " + df_features['Grade'] + " " + df_features['Grade Points'].astype(str)

X

"""# Get Feature Text Conversion to Tokens"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf=TfidfVectorizer()

X.shape

print(X)



"""# Get Similarity Score using Cosine Similarity
## Model Evaluation

cosine_similarity computes the L2-normalized dot product of vectors.Euclidean (L2) normalization projects the vectors onto the unit sphere, and their dot products is then the cosine fo the angle between the points denoted by the vectors.
"""

from sklearn.metrics.pairwise import cosine_similarity

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

# Assuming X is your list of strings
# The input data contains only whitespaces, causing the error.
# Replace with actual text data or modify the vectorizer's tokenization/stop words settings
X = ['This is the first document.', 'This document is the second document.', 'And this is the third one.']
# 1. Create a TfidfVectorizer object
vectorizer = TfidfVectorizer()

# 2. Fit the vectorizer to your data and transform it into a numerical representation
X_tfidf = vectorizer.fit_transform(X)

# 3. Calculate the cosine similarity using the numerical representation
Similarity_score = cosine_similarity(X_tfidf)

Similarity_score

Similarity_score.shape